apiVersion: apps/v1
kind: Deployment
metadata:
  name: midas-workspace
  labels:
    app: midas-workspace
    component: interview-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: midas-workspace
  template:
    metadata:
      labels:
        app: midas-workspace
    spec:
      initContainers:
      - name: workspace-init
        image: image-registry.openshift-image-registry.svc:5000/hpc-interview/hpc-midas:latest
        imagePullPolicy: Always
        command: ["/bin/bash"]
        args:
        - -c
        - |
          echo "🚀 Initializing MIDAS workspace..."
          if [ ! -f /workspace/.initialized ]; then
            echo "📂 Copying workspace files from container seed..."
            # Copy MIDAS-specific files
            cp -r /tmp/workspace-seed/* /workspace/ 2>/dev/null || true
            
            # Create project structure directories
            mkdir -p /workspace/examples /workspace/reframe /workspace/docs /workspace/spack
            
            # Create MIDAS experiment directories
            mkdir -p /workspace/midas/experiments/demo
            mkdir -p /workspace/midas/data
            mkdir -p /workspace/midas/logs
            
            # Create comprehensive Python demo
            cat > /workspace/midas/midas_demo.py << 'PYTHON_EOF'
          #!/usr/bin/env python3
          """MIDAS Python Demo Script"""
          import os, sys, time, json, subprocess
          
          def check_midas_environment():
              print("🔍 Checking MIDAS Python environment...")
              midassys = os.environ.get('MIDASSYS')
              if not midassys:
                  print("❌ MIDASSYS environment variable not set")
                  return False
              print(f"✅ MIDAS System: {midassys}")
              return True
          
          def test_odb_connection():
              print("🗄️  Testing ODB connection...")
              try:
                  result = subprocess.run(['odbedit', '-c', 'ls /'], 
                                        capture_output=True, text=True, timeout=10)
                  if result.returncode == 0:
                      print("✅ ODB connection successful")
                      return True
                  else:
                      print(f"❌ ODB connection failed: {result.stderr}")
                      return False
              except Exception as e:
                  print(f"❌ ODB test error: {e}")
                  return False
          
          def simulate_data_generation():
              print("🎲 Simulating data generation...")
              sample_data = {
                  'experiment': 'MIDAS Demo',
                  'timestamp': time.time(),
                  'events': [{'event_id': i, 'data': i*123} for i in range(10)]
              }
              data_dir = os.path.expanduser('~/workspace/midas/data')
              os.makedirs(data_dir, exist_ok=True)
              data_file = os.path.join(data_dir, f'demo_data_{int(time.time())}.json')
              with open(data_file, 'w') as f:
                  json.dump(sample_data, f, indent=2)
              print(f"✅ Sample data saved to: {data_file}")
              return data_file
          
          def main():
              print("🐍 MIDAS Python Demo Starting...")
              if not check_midas_environment():
                  sys.exit(1)
              test_odb_connection()
              simulate_data_generation()
              print("🎉 MIDAS Python Demo Completed!")
          
          if __name__ == '__main__':
              main()
          PYTHON_EOF
            
            # Create comprehensive C frontend
            cat > /workspace/midas/experiments/demo/frontend.c << 'C_EOF'
          #include <stdio.h>
          #include <stdlib.h>
          #include <string.h>
          #include "midas.h"
          #include "msystem.h"
          
          #ifdef __cplusplus
          extern "C" {
          #endif
          
          const char *frontend_name = "Demo Frontend";
          const char *frontend_file_name = __FILE__;
          BOOL frontend_call_loop = TRUE;
          INT max_event_size = 10000;
          INT max_event_size_frag = 5 * 1024 * 1024;
          INT event_buffer_size = 10 * 10000;
          
          INT frontend_init() { printf("Frontend Demo initialized\n"); return SUCCESS; }
          INT frontend_exit() { return SUCCESS; }
          INT frontend_loop() { return SUCCESS; }
          INT begin_of_run(INT run_number, char *error) { printf("Starting run %d\n", run_number); return SUCCESS; }
          INT end_of_run(INT run_number, char *error) { printf("Ending run %d\n", run_number); return SUCCESS; }
          INT pause_run(INT run_number, char *error) { return SUCCESS; }
          INT resume_run(INT run_number, char *error) { return SUCCESS; }
          INT frontend_early_init() { return SUCCESS; }
          
          EQUIPMENT equipment[] = {
             {"Trigger", {1, 0, "SYSTEM", EQ_PERIODIC, LAM_SOURCE(0, 0xFFFFFF), "MIDAS", TRUE, RO_RUNNING, 500, 0, 0, 0, "", "", ""}, NULL},
             {""}
          };
          
          INT poll_event(INT source, INT count, BOOL test) { return FALSE; }
          INT interrupt_configure(INT cmd, INT source, POINTER_T adr) { return SUCCESS; }
          INT read_trigger_event(char *pevent, INT off) {
             WORD *pdata;
             bk_init32(pevent);
             bk_create(pevent, "ADC0", TID_WORD, (void **)&pdata);
             *pdata++ = 0x1234; *pdata++ = 0x5678;
             bk_close(pevent, pdata);
             return bk_size(pevent);
          }
          
          #ifdef __cplusplus
          }
          #endif
          C_EOF
            
            # Fix permissions
            chmod +x /workspace/midas/midas_env.sh
            chmod +x /workspace/midas/midas_demo.py
            
            # Mark as initialized
            touch /workspace/.initialized
            echo "✅ MIDAS workspace initialized with demo files"
          else
            echo "✅ Workspace already initialized"
          fi
          echo "🏁 InitContainer completed successfully"
        volumeMounts:
        - name: shared-workspace
          mountPath: /workspace
        - name: shared-data
          mountPath: /data
      containers:
      - name: hpc-midas
        image: image-registry.openshift-image-registry.svc:5000/hpc-interview/hpc-midas:latest
        imagePullPolicy: Always
        command: ["/bin/bash"]
        args: 
        - "-c"
        - |
          # MIDAS Services Startup Script (Fixed version based on MIDAS_WEB_SERVER_FIX.md)
          export MIDASSYS=${MIDASSYS:-/opt/midas/install}
          export PATH=$MIDASSYS/bin:$PATH
          export LD_LIBRARY_PATH=$MIDASSYS/lib:$LD_LIBRARY_PATH
          
          echo "🚀 Starting MIDAS services..."
          
          # Create proper experiment directory structure
          mkdir -p /tmp/midas_demo/{data,logs,odb}
          cd /tmp/midas_demo
          
          # Create experiment table
          echo 'demo /tmp/midas_demo hpcuser' > exptab
          export MIDAS_EXPTAB=/tmp/midas_demo/exptab
          
          # Function to check if port is in use
          check_port() {
            netstat -ln 2>/dev/null | grep ":$1" >/dev/null
          }
          
          echo "🔄 Cleaning up any existing MIDAS processes..."
          pkill -f "mserver.*demo" 2>/dev/null || true
          pkill -f "mhttpd.*demo" 2>/dev/null || true
          pkill -f "mlogger.*demo" 2>/dev/null || true
          sleep 2
          
          # Clean up old ODB files
          rm -f .odb* odb.log 2>/dev/null || true
          
          echo "🗄️ Initializing ODB database..."
          # Create basic ODB structure
          odbedit -e demo -c 'create STRING "/Experiment/Name[32]" "MIDAS Demo"' 2>&1 || echo "  ℹ️  ODB structure may already exist"
          echo "  ✅ ODB experiment name set"
          
          echo "🗄️ Starting ODB server..."
          mserver -e demo > odb.log 2>&1 &
          MSERVER_PID=$!
          sleep 5
          
          # Verify ODB server is running and responsive
          if kill -0 $MSERVER_PID 2>/dev/null && odbedit -e demo -c 'ls /' >/dev/null 2>&1; then
            echo "  ✅ ODB server running (PID: $MSERVER_PID)"
          else
            echo "  ❌ ODB server failed to start"
            cat odb.log
            exit 1
          fi
          
          echo "🌐 Starting MIDAS web interface..."
          # Start MIDAS web server (port configured via ODB to 8081)
          mhttpd -e demo --no-hostlist > mhttpd.log 2>&1 &
          MHTTPD_PID=$!
          sleep 5
          
          # Verify MIDAS web server is running on port 8080 (default)
          if kill -0 $MHTTPD_PID 2>/dev/null && check_port 8080; then
            echo "  ✅ MIDAS web interface started (PID: $MHTTPD_PID)"
          else
            echo "  ❌ MIDAS web server failed to start"
            cat mhttpd.log
            exit 1
          fi
          
          echo "📝 Starting MIDAS logger..."
          mlogger -e demo > mlogger.log 2>&1 &
          MLOGGER_PID=$!
          
          if kill -0 $MLOGGER_PID 2>/dev/null; then
            echo "  ✅ Logger started (PID: $MLOGGER_PID)"
          else
            echo "  ⚠️  Logger may have issues, check mlogger.log"
          fi
          
          echo "🎯 MIDAS services status:"
          ps aux | grep -E "(mserver|mhttpd|mlogger)" | grep -v grep || echo "  No MIDAS processes found"
          
          echo "🔍 Network status:"
          netstat -ln 2>/dev/null | grep -E ":(8080|1175)" || echo "  No network ports bound"
          
          echo "✅ MIDAS startup completed"
          
          # Keep container running and monitor services with enhanced health checks
          while true; do
            sleep 30
            
            # Check and restart ODB server if needed
            if ! kill -0 $MSERVER_PID 2>/dev/null; then
              echo "🔄 Restarting ODB server..."
              mserver -e demo > odb.log 2>&1 &
              MSERVER_PID=$!
              sleep 3
            fi
            
            # Check and restart web server if needed (with port verification)
            if ! kill -0 $MHTTPD_PID 2>/dev/null || ! check_port 8080; then
              echo "🔄 Restarting MIDAS web server..."
              pkill -f "mhttpd.*demo" 2>/dev/null || true
              sleep 2
              mhttpd -e demo --no-hostlist > mhttpd.log 2>&1 &
              MHTTPD_PID=$!
              sleep 3
            fi
            
            # Check and restart logger if needed
            if ! kill -0 $MLOGGER_PID 2>/dev/null; then
              echo "🔄 Restarting logger..."
              mlogger -e demo > mlogger.log 2>&1 &
              MLOGGER_PID=$!
            fi
          done
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "6Gi"
            cpu: "4000m"
        volumeMounts:
        - name: shared-workspace
          mountPath: /home/hpcuser/workspace
        - name: shared-data
          mountPath: /home/hpcuser/data
        - name: legacy-shared
          mountPath: /shared
        env:
        - name: WORKSPACE_TYPE
          value: "hpc-midas"
        - name: MIDASSYS
          value: "/opt/midas/install"
        - name: ROOTSYS
          value: "/usr"
        - name: MIDAS_EXPT_NAME
          value: "demo"
        - name: MIDAS_EXPT_DIR
          value: "/home/hpcuser/workspace/midas/experiments/demo"
        ports:
        - containerPort: 1175
          name: midas-odb
          protocol: TCP
      # Nginx sidecar proxy to expose mhttpd externally
      - name: nginx-proxy
        image: nginx:alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 8088
          name: http-proxy
          protocol: TCP
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        readinessProbe:
          httpGet:
            path: /nginx-health
            port: 8088
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /nginx-health
            port: 8088
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: shared-workspace
        persistentVolumeClaim:
          claimName: hpc-shared-workspace
      - name: shared-data
        persistentVolumeClaim:
          claimName: hpc-shared-data
      - name: legacy-shared
        emptyDir: {}
      - name: nginx-config
        configMap:
          name: midas-nginx-config
          items:
            - key: nginx.conf
              path: nginx.conf
      securityContext:
        runAsNonRoot: true
---
apiVersion: v1
kind: Service
metadata:
  name: midas-workspace-svc
  labels:
    app: midas-workspace
spec:
  selector:
    app: midas-workspace
  ports:
  - name: midas-web
    port: 8080
    targetPort: 8088
    protocol: TCP
  - name: midas-odb
    port: 1175
    targetPort: 1175
    protocol: TCP
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: midas-web-route
  labels:
    app: midas-workspace
spec:
  to:
    kind: Service
    name: midas-workspace-svc
  port:
    targetPort: midas-web
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
